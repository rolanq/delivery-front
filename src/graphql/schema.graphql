type Mutation {
  signUp(data: SignUpInput): SignUpPayload
  updateUser(data: PartialUpdateUserInput): AuthPayload

  addItemToCart(data: AddItemToCartInput): Cart
  deleteCartItems(data: DeleteCartItemsInput): Cart
}

type Query {
  getUser(token: String!): User!
  getRestaurants: [Restuarant]
  getRestuarant(id: ID!): Restuarant!
  getMenuItems(ids: [IDsInput]): [MenuItem!]!
  getCart(userId: IDsInput): Cart
  getFavorites(userId: IDsInput): [Restuarant]
}

type User {
  id: ID!
  name: String
  phone: String
  email: String
  address: String
}

input SignUpInput {
  email: String
}

input PartialUpdateUserInput {
  name: String
  phone: String
  email: String
  address: String
  verifyCode: String
}

type Restuarant {
  id: ID!
  name: String!
  rating: Float
  address: String!
  description: String!
  startWorkingDay: String!
  endWorkingDay: String!
  categories: String
  image: String
  MenuCategories: [MenuCategory]
}

type MenuCategory {
  id: ID!
  name: String!
  MenuItems: [MenuItem]
}

type MenuItem {
  id: ID!
  name: String
  image: String
  description: String
  weight: Int
  price: Int
}

type AuthPayload {
  token: String
  user: User
}

type SignUpPayload {
  success: String
}

input IDsInput {
  id: String!
}

type Cart {
  cart: [CartItem]
  totalCount: Int
  restuarantId: Int
  fullPrice: Int
}

type CartItem {
  count: Int
  menuItem: MenuItem
}

input AddItemToCartInput {
  userId: String
  menuItemId: Int
  count: Int
  restuarantId: Int
}

input UpdateCartItemInput {
  userId: String
  menuItemId: Int
  count: Int
  restuarantId: Int
}

input DeleteCartItemsInput {
  userId: String
  menuItemIds: [String]
  restuarantId: Int
}
